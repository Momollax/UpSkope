name: Build UpSkope

permissions:
  contents: write

on:
  push:
    branches: ["**"]
    tags: ["v*"]           # build + publish si tag poussé
  pull_request:
  release:
    types: [published]     # <-- build + upload quand tu publies une release via l’UI
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag à publier (ex: v1.0.0)"
        required: false

jobs:
  build:
    runs-on: windows-2022

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup MSBuild (VS2022)
      uses: microsoft/setup-msbuild@v2

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v2

    - name: Cache NuGet
      uses: actions/cache@v4
      with:
        path: |
          ~\AppData\Local\NuGet\Cache
          ~\AppData\Local\NuGet\v3-cache
          ~\.nuget\packages
        key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.config', '**/*.csproj', '**/*.sln') }}
        restore-keys: nuget-${{ runner.os }}-

    - name: Restore NuGet packages
      run: nuget restore .\UpSkope.sln

    # (Supprime si tu corriges le PostBuild d'IPCProxy pour copier vers UpSkope\resources\)
    - name: Préparer le dossier attendu par le post-build
      run: New-Item -ItemType Directory -Path "IPCProxy\Upskope\resources" -Force
   
    - name: Build IPCProxy (C++ Release/x64)
      run: msbuild .\IPCProxy\IPCProxy.vcxproj /m /p:Configuration=Release /p:Platform=x64

    - name: Build CustomAction (C++ Release/x64)
      run: msbuild .\CustomAction\CustomAction.vcxproj /m /p:Configuration=Release /p:Platform=x64


    - name: Build UpSkope (C#)
      run: msbuild .\UpSkope\UpSkope.csproj /m /p:Configuration=Release /p:Platform=AnyCPU

    # Artifacts CI (onglet Actions) – utile pour debug / historique
    - name: Upload artifacts (exe + DLL)
      uses: actions/upload-artifact@v4
      with:
        name: UpSkope-Release
        if-no-files-found: error
        path: |
          UpSkope\bin\Release\**\UpSkope.exe
          IPCProxy\Release\**\*.dll
          CustomAction\Release\**\*.dll

    # ---------- Préparer la Release ----------
    - name: Déterminer le tag de release
      # on exécute pour tag push, release published, ou dispatch manuel
      if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'release' || github.event_name == 'workflow_dispatch'
      shell: pwsh
      run: |
        $t = "${{ github.ref_name }}"
        if ("${{ github.event_name }}" -eq "release") { $t = "${{ github.event.release.tag_name }}" }
        if ("${{ github.event_name }}" -eq "workflow_dispatch" -and "${{ inputs.tag }}") { $t = "${{ inputs.tag }}" }
        "REL_TAG=$t" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

    - name: Rassembler les fichiers pour la Release
      if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'release' || github.event_name == 'workflow_dispatch'
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Path dist -Force | Out-Null
        Copy-Item "UpSkope\bin\Release\UpSkope.exe" dist\ -ErrorAction Stop
        # récupère les DLL C++ sans supposer le sous-dossier
        Get-ChildItem -Path IPCProxy, CustomAction -Recurse -Filter *.dll | ForEach-Object {
          Copy-Item $_.FullName dist\ -Force
        }
        Compress-Archive -Path dist\* -DestinationPath ("dist\UpSkope-" + $env:REL_TAG + ".zip") -Force

    - name: Create/Update GitHub Release & upload assets
      if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'release' || github.event_name == 'workflow_dispatch'
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.REL_TAG }}             # si la release existe déjà (UI), l’action l’update
        name: UpSkope ${{ env.REL_TAG }}
        files: |                                  # chemins POSIX exigés par l’action
          dist/UpSkope-${{ env.REL_TAG }}.zip
          dist/UpSkope.exe
          dist/*.dll
